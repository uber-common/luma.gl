'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CubeGeometry = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _geometry = require('../geometry');

var _geometry2 = _interopRequireDefault(_geometry);

var _model = require('../model');

var _model2 = _interopRequireDefault(_model);

var _types = require('../webgl/types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable no-multi-spaces, indent */
var CUBE_INDICES = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23];

var CUBE_VERTICES = [-1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1];

var CUBE_NORMALS = [
// Front face
0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0,

// Back face
0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0,

// Top face
0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,

// Bottom face
0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0,

// Right face
1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0,

// Left face
-1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0];

var CUBE_TEX_COORDS = [
// Front face
0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0,

// Back face
1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,

// Top face
0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0,

// Bottom face
1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,

// Right face
1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,

// Left face
0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0];
/* eslint-enable no-multi-spaces, indent */

var CubeGeometry = exports.CubeGeometry = function (_Geometry) {
  _inherits(CubeGeometry, _Geometry);

  function CubeGeometry() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, CubeGeometry);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(CubeGeometry).call(this, _extends({
      attributes: {
        indices: (0, _types.makeTypedArray)(Uint16Array, CUBE_INDICES),
        vertices: (0, _types.makeTypedArray)(Float32Array, CUBE_VERTICES),
        normals: (0, _types.makeTypedArray)(Float32Array, CUBE_NORMALS),
        texCoords: (0, _types.makeTypedArray)(Float32Array, CUBE_TEX_COORDS)
      }
    }, opts)));
  }

  return CubeGeometry;
}(_geometry2.default);

var Cube = function (_Model) {
  _inherits(Cube, _Model);

  function Cube() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Cube);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Cube).call(this, _extends({ geometry: new CubeGeometry(opts) }, opts)));
  }

  return Cube;
}(_model2.default);

exports.default = Cube;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vYmplY3RzL2N1YmUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7Ozs7OztBQUdBLElBQU0sZUFBZSxDQUNuQixDQURtQixFQUNoQixDQURnQixFQUNiLENBRGEsRUFDVixDQURVLEVBQ1AsQ0FETyxFQUNKLENBREksRUFFbkIsQ0FGbUIsRUFFaEIsQ0FGZ0IsRUFFYixDQUZhLEVBRVYsQ0FGVSxFQUVQLENBRk8sRUFFSixDQUZJLEVBR25CLENBSG1CLEVBR2hCLENBSGdCLEVBR2IsRUFIYSxFQUdULENBSFMsRUFHTixFQUhNLEVBR0YsRUFIRSxFQUluQixFQUptQixFQUlmLEVBSmUsRUFJWCxFQUpXLEVBSVAsRUFKTyxFQUlILEVBSkcsRUFJQyxFQUpELEVBS25CLEVBTG1CLEVBS2YsRUFMZSxFQUtYLEVBTFcsRUFLUCxFQUxPLEVBS0gsRUFMRyxFQUtDLEVBTEQsRUFNbkIsRUFObUIsRUFNZixFQU5lLEVBTVgsRUFOVyxFQU1QLEVBTk8sRUFNSCxFQU5HLEVBTUMsRUFORCxDQUFmOztBQVNOLElBQU0sZ0JBQWdCLENBQ3BCLENBQUMsQ0FBRCxFQUFJLENBQUMsQ0FBRCxFQUFLLENBRFcsRUFFbkIsQ0FGbUIsRUFFaEIsQ0FBQyxDQUFELEVBQUssQ0FGVyxFQUduQixDQUhtQixFQUdmLENBSGUsRUFHWCxDQUhXLEVBSXBCLENBQUMsQ0FBRCxFQUFLLENBSmUsRUFJWCxDQUpXLEVBTXBCLENBQUMsQ0FBRCxFQUFJLENBQUMsQ0FBRCxFQUFJLENBQUMsQ0FBRCxFQUNSLENBQUMsQ0FBRCxFQUFLLENBUGUsRUFPWixDQUFDLENBQUQsRUFDUCxDQVJtQixFQVFmLENBUmUsRUFRWixDQUFDLENBQUQsRUFDUCxDQVRtQixFQVNoQixDQUFDLENBQUQsRUFBSSxDQUFDLENBQUQsRUFFUixDQUFDLENBQUQsRUFBSyxDQVhlLEVBV1osQ0FBQyxDQUFELEVBQ1IsQ0FBQyxDQUFELEVB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RUFnQmpCLEdBaEJpQixFQWlCdEIsR0FqQnNCLEVBaUJqQixHQWpCaUI7OztBQW9CdEIsR0FwQnNCLEVBb0JqQixHQXBCaUIsRUFxQnRCLEdBckJzQixFQXFCakIsR0FyQmlCLEVBc0J0QixHQXRCc0IsRUFzQmpCLEdBdEJpQixFQXVCdEIsR0F2QnNCLEVBdUJqQixHQXZCaUI7OztBQTBCdEIsR0ExQnNCLEVBMEJqQixHQTFCaUIsRUEyQnRCLEdBM0JzQixFQTJCakIsR0EzQmlCLEVBNEJ0QixHQTVCc0IsRUE0QmpCLEdBNUJpQixFQTZCdEIsR0E3QnNCLEVBNkJqQixHQTdCaUI7OztBQWdDdEIsR0FoQ3NCLEVBZ0NqQixHQWhDaUIsRUFpQ3RCLEdBakNzQixFQWlDakIsR0FqQ2lCLEVBa0N0QixHQWxDc0IsRUFrQ2pCLEdBbENpQixFQW1DdEIsR0FuQ3NCLEVBbUNqQixHQW5DaUIsQ0FBbEI7OztJQXVDTzs7O0FBQ1gsV0FEVyxZQUNYLEdBQXVCO1FBQVgsNkRBQU8sa0JBQUk7OzBCQURaLGNBQ1k7O2tFQURaO0FBR1Asa0JBQVk7QUFDVixpQkFBUywyQkFBZSxXQUFmLEVBQTRCLFlBQTVCLENBQVQ7QUFDQSxrQkFBVSwyQkFBZSxZQUFmLEVBQTZCLGFBQTdCLENBQVY7QUFDQSxpQkFBUywyQkFBZSxZQUFmLEVBQTZCLFlBQTdCLENBQVQ7QUFDQSxtQkFBVywyQkFBZSxZQUFmLEVBQTZCLGVBQTdCLENBQVg7T0FKRjtPQU1HLFFBUmdCO0dBQXZCOztTQURXOzs7SUFjUTs7O0FBQ25CLFdBRG1CLElBQ25CLEdBQXVCO1FBQVgsNkRBQU8sa0JBQUk7OzBCQURKLE1BQ0k7O2tFQURKLDRCQUVWLFVBQVUsSUFBSSxZQUFKLENBQWlCLElBQWpCLENBQVYsSUFBcUMsUUFEdkI7R0FBdkI7O1NBRG1CIiwiZmlsZSI6ImN1YmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR2VvbWV0cnkgZnJvbSAnLi4vZ2VvbWV0cnknO1xuaW1wb3J0IE1vZGVsIGZyb20gJy4uL21vZGVsJztcbmltcG9ydCB7bWFrZVR5cGVkQXJyYXl9IGZyb20gJy4uL3dlYmdsL3R5cGVzJztcblxuLyogZXNsaW50LWRpc2FibGUgbm8tbXVsdGktc3BhY2VzLCBpbmRlbnQgKi9cbmNvbnN0IENVQkVfSU5ESUNFUyA9IFtcbiAgMCwgMSwgMiwgMCwgMiwgMyxcbiAgNCwgNSwgNiwgNCwgNiwgNyxcbiAgOCwgOSwgMTAsIDgsIDEwLCAxMSxcbiAgMTIsIDEzLCAxNCwgMTIsIDE0LCAxNSxcbiAgMTYsIDE3LCAxOCwgMTYsIDE4LCAxOSxcbiAgMjAsIDIxLCAyMiwgMjAsIDIyLCAyM1xuXTtcblxuY29uc3QgQ1VCRV9WRVJUSUNFUyA9IFtcbiAgLTEsIC0xLCAgMSxcbiAgIDEsIC0xLCAgMSxcbiAgIDEsICAxLCAgMSxcbiAgLTEsICAxLCAgMSxcblxuICAtMSwgLTEsIC0xLFxuICAtMSwgIDEsIC0xLFxuICAgMSwgIDEsIC0xLFxuICAgMSwgLTEsIC0xLFxuXG4gIC0xLCAgMSwgLTEsXG4gIC0xLCAgMSwgIDEsXG4gICAxLCAgMSwgIDEsXG4gICAxLCAgMSwgLTEsXG5cbiAgLTEsIC0xLCAtMSxcbiAgIDEsIC0xLCAtMSxcbiAgIDEsIC0xLCAgMSxcbiAgLTEsIC0xLCAgMSxcblxuICAgMSwgLTEsIC0xLFxuICAgMSwgIDEsIC0xLFxuICAgMSwgIDEsICAxLFxuICAgMSwgLTEsICAxLFxuXG4gIC0xLCAtMSwgLTEsXG4gIC0xLCAtMSwgIDEsXG4gIC0xLCAgMSwgIDEsXG4gIC0xLCAgMSwgLTFcbl07XG5cbmNvbnN0IENVQkVfTk9STUFMUyA9IFtcbiAgLy8gRnJvbnQgZmFjZVxuICAwLjAsICAwLjAsICAxLjAsXG4gIDAuMCwgIDAuMCwgIDEuMCxcbiAgMC4wLCAgMC4wLCAgMS4wLFxuICAwLjAsICAwLjAsICAxLjAsXG5cbiAgLy8gQmFjayBmYWNlXG4gIDAuMCwgIDAuMCwgLTEuMCxcbiAgMC4wLCAgMC4wLCAtMS4wLFxuICAwLjAsICAwLjAsIC0xLjAsXG4gIDAuMCwgIDAuMCwgLTEuMCxcblxuICAvLyBUb3AgZmFjZVxuICAwLjAsICAxLjAsICAwLjAsXG4gIDAuMCwgIDEuMCwgIDAuMCxcbiAgMC4wLCAgMS4wLCAgMC4wLFxuICAwLjAsICAxLjAsICAwLjAsXG5cbiAgLy8gQm90dG9tIGZhY2VcbiAgMC4wLCAtMS4wLCAgMC4wLFxuICAwLjAsIC0xLjAsICAwLjAsXG4gIDAuMCwgLTEuMCwgIDAuMCxcbiAgMC4wLCAtMS4wLCAgMC4wLFxuXG4gIC8vIFJpZ2h0IGZhY2VcbiAgMS4wLCAgMC4wLCAgMC4wLFxuICAxLjAsICAwLjAsICAwLjAsXG4gIDEuMCwgIDAuMCwgIDAuMCxcbiAgMS4wLCAgMC4wLCAgMC4wLFxuXG4gIC8vIExlZnQgZmFjZVxuICAtMS4wLCAgMC4wLCAgMC4wLFxuICAtMS4wLCAgMC4wLCAgMC4wLFxuICAtMS4wLCAgMC4wLCAgMC4wLFxuICAtMS4wLCAgMC4wLCAgMC4wXG5dO1xuXG5jb25zdCBDVUJFX1RFWF9DT09SRFMgPSBbXG4gIC8vIEZyb250IGZhY2VcbiAgMC4wLCAwLjAsXG4gIDEuMCwgMC4wLFxuICAxLjAsIDEuMCxcbiAgMC4wLCAxLjAsXG5cbiAgLy8gQmFjayBmYWNlXG4gIDEuMCwgMC4wLFxuICAxLjAsIDEuMCxcbiAgMC4wLCAxLjAsXG4gIDAuMCwgMC4wLFxuXG4gIC8vIFRvcCBmYWNlXG4gIDAuMCwgMS4wLFxuICAwLjAsIDAuMCxcbiAgMS4wLCAwLjAsXG4gIDEuMCwgMS4wLFxuXG4gIC8vIEJvdHRvbSBmYWNlXG4gIDEuMCwgMS4wLFxuICAwLjAsIDEuMCxcbiAgMC4wLCAwLjAsXG4gIDEuMCwgMC4wLFxuXG4gIC8vIFJpZ2h0IGZhY2VcbiAgMS4wLCAwLjAsXG4gIDEuMCwgMS4wLFxuICAwLjAsIDEuMCxcbiAgMC4wLCAwLjAsXG5cbiAgLy8gTGVmdCBmYWNlXG4gIDAuMCwgMC4wLFxuICAxLjAsIDAuMCxcbiAgMS4wLCAxLjAsXG4gIDAuMCwgMS4wXG5dO1xuLyogZXNsaW50LWVuYWJsZSBuby1tdWx0aS1zcGFjZXMsIGluZGVudCAqL1xuXG5leHBvcnQgY2xhc3MgQ3ViZUdlb21ldHJ5IGV4dGVuZHMgR2VvbWV0cnkge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcih7XG4gICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgIGluZGljZXM6IG1ha2VUeXBlZEFycmF5KFVpbnQxNkFycmF5LCBDVUJFX0lORElDRVMpLFxuICAgICAgICB2ZXJ0aWNlczogbWFrZVR5cGVkQXJyYXkoRmxvYXQzMkFycmF5LCBDVUJFX1ZFUlRJQ0VTKSxcbiAgICAgICAgbm9ybWFsczogbWFrZVR5cGVkQXJyYXkoRmxvYXQzMkFycmF5LCBDVUJFX05PUk1BTFMpLFxuICAgICAgICB0ZXhDb29yZHM6IG1ha2VUeXBlZEFycmF5KEZsb2F0MzJBcnJheSwgQ1VCRV9URVhfQ09PUkRTKVxuICAgICAgfSxcbiAgICAgIC4uLm9wdHNcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDdWJlIGV4dGVuZHMgTW9kZWwge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcih7Z2VvbWV0cnk6IG5ldyBDdWJlR2VvbWV0cnkob3B0cyksIC4uLm9wdHN9KTtcbiAgfVxufVxuIl19