'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IcoSphereGeometry = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _geometry = require('../geometry');

var _geometry2 = _interopRequireDefault(_geometry);

var _math = require('../math');

var _model = require('../model');

var _model2 = _interopRequireDefault(_model);

var _types = require('../webgl/types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable comma-spacing, max-statements, complexity */

function noop() {}

var ICO_VERTICES = [-1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 1, 0, -1, 0, 1, 0, 0];
var ICO_INDICES = [3, 4, 5, 3, 5, 1, 3, 1, 0, 3, 0, 4, 4, 0, 2, 4, 2, 5, 2, 0, 1, 5, 2, 1];

var IcoSphereGeometry = exports.IcoSphereGeometry = function (_Geometry) {
  _inherits(IcoSphereGeometry, _Geometry);

  function IcoSphereGeometry() {
    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var _ref$iterations = _ref.iterations;
    var iterations = _ref$iterations === undefined ? 0 : _ref$iterations;
    var _ref$onAddVertex = _ref.onAddVertex;
    var onAddVertex = _ref$onAddVertex === undefined ? noop : _ref$onAddVertex;

    var opts = _objectWithoutProperties(_ref, ['iterations', 'onAddVertex']);

    _classCallCheck(this, IcoSphereGeometry);

    var PI = Math.PI;
    var PI2 = PI * 2;

    var vertices = [].concat(ICO_VERTICES);
    var indices = [].concat(ICO_INDICES);

    vertices.push();
    indices.push();

    var getMiddlePoint = function () {
      var pointMemo = {};

      return function (i1, i2) {
        i1 *= 3;
        i2 *= 3;
        var mini = i1 < i2 ? i1 : i2;
        var maxi = i1 > i2 ? i1 : i2;
        var key = mini + '|' + maxi;

        if (key in pointMemo) {
          return pointMemo[key];
        }

        var x1 = vertices[i1];
        var y1 = vertices[i1 + 1];
        var z1 = vertices[i1 + 2];
        var x2 = vertices[i2];
        var y2 = vertices[i2 + 1];
        var z2 = vertices[i2 + 2];
        var xm = (x1 + x2) / 2;
        var ym = (y1 + y2) / 2;
        var zm = (z1 + z2) / 2;
        var len = Math.sqrt(xm * xm + ym * ym + zm * zm);

        xm /= len;
        ym /= len;
        zm /= len;

        vertices.push(xm, ym, zm);

        return pointMemo[key] = vertices.length / 3 - 1;
      };
    }();

    for (var i = 0; i < iterations; i++) {
      var indices2 = [];
      for (var j = 0; j < indices.length; j += 3) {
        var a = getMiddlePoint(indices[j + 0], indices[j + 1]);
        var b = getMiddlePoint(indices[j + 1], indices[j + 2]);
        var c = getMiddlePoint(indices[j + 2], indices[j + 0]);

        indices2.push(c, indices[j + 0], a, a, indices[j + 1], b, b, indices[j + 2], c, a, b, c);
      }
      indices = indices2;
    }

    // Calculate texCoords and normals
    var normals = new Array(indices.length * 3);
    var texCoords = new Array(indices.length * 2);

    var l = indices.length;
    for (var _i = l - 3; _i >= 0; _i -= 3) {
      var i1 = indices[_i + 0];
      var i2 = indices[_i + 1];
      var i3 = indices[_i + 2];
      var in1 = i1 * 3;
      var in2 = i2 * 3;
      var in3 = i3 * 3;
      var iu1 = i1 * 2;
      var iu2 = i2 * 2;
      var iu3 = i3 * 2;
      var x1 = vertices[in1 + 0];
      var y1 = vertices[in1 + 1];
      var z1 = vertices[in1 + 2];
      var theta1 = Math.acos(z1 / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1));
      var phi1 = Math.atan2(y1, x1) + PI;
      var v1 = theta1 / PI;
      var u1 = 1 - phi1 / PI2;
      var x2 = vertices[in2 + 0];
      var y2 = vertices[in2 + 1];
      var z2 = vertices[in2 + 2];
      var theta2 = Math.acos(z2 / Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2));
      var phi2 = Math.atan2(y2, x2) + PI;
      var v2 = theta2 / PI;
      var u2 = 1 - phi2 / PI2;
      var x3 = vertices[in3 + 0];
      var y3 = vertices[in3 + 1];
      var z3 = vertices[in3 + 2];
      var theta3 = Math.acos(z3 / Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3));
      var phi3 = Math.atan2(y3, x3) + PI;
      var v3 = theta3 / PI;
      var u3 = 1 - phi3 / PI2;
      var vec1 = [x3 - x2, y3 - y2, z3 - z2];
      var vec2 = [x1 - x2, y1 - y2, z1 - z2];
      var normal = _math.Vec3.cross(vec1, vec2).$unit();
      var newIndex = void 0;

      if ((u1 === 0 || u2 === 0 || u3 === 0) && (u1 === 0 || u1 > 0.5) && (u2 === 0 || u2 > 0.5) && (u3 === 0 || u3 > 0.5)) {

        vertices.push(vertices[in1 + 0], vertices[in1 + 1], vertices[in1 + 2]);
        newIndex = vertices.length / 3 - 1;
        indices.push(newIndex);
        texCoords[newIndex * 2 + 0] = 1;
        texCoords[newIndex * 2 + 1] = v1;
        normals[newIndex * 3 + 0] = normal.x;
        normals[newIndex * 3 + 1] = normal.y;
        normals[newIndex * 3 + 2] = normal.z;

        vertices.push(vertices[in2 + 0], vertices[in2 + 1], vertices[in2 + 2]);
        newIndex = vertices.length / 3 - 1;
        indices.push(newIndex);
        texCoords[newIndex * 2 + 0] = 1;
        texCoords[newIndex * 2 + 1] = v2;
        normals[newIndex * 3 + 0] = normal.x;
        normals[newIndex * 3 + 1] = normal.y;
        normals[newIndex * 3 + 2] = normal.z;

        vertices.push(vertices[in3 + 0], vertices[in3 + 1], vertices[in3 + 2]);
        newIndex = vertices.length / 3 - 1;
        indices.push(newIndex);
        texCoords[newIndex * 2 + 0] = 1;
        texCoords[newIndex * 2 + 1] = v3;
        normals[newIndex * 3 + 0] = normal.x;
        normals[newIndex * 3 + 1] = normal.y;
        normals[newIndex * 3 + 2] = normal.z;
      }

      normals[in1 + 0] = normals[in2 + 0] = normals[in3 + 0] = normal.x;
      normals[in1 + 1] = normals[in2 + 1] = normals[in3 + 1] = normal.y;
      normals[in1 + 2] = normals[in2 + 2] = normals[in3 + 2] = normal.z;

      texCoords[iu1 + 0] = u1;
      texCoords[iu1 + 1] = v1;

      texCoords[iu2 + 0] = u2;
      texCoords[iu2 + 1] = v2;

      texCoords[iu3 + 0] = u3;
      texCoords[iu3 + 1] = v3;
    }

    return _possibleConstructorReturn(this, Object.getPrototypeOf(IcoSphereGeometry).call(this, _extends({}, opts, {
      attributes: {
        vertices: (0, _types.makeTypedArray)(Float32Array, vertices),
        normals: (0, _types.makeTypedArray)(Float32Array, normals),
        texCoords: (0, _types.makeTypedArray)(Float32Array, texCoords),
        indices: (0, _types.makeTypedArray)(Uint16Array, indices)
      }
    })));
  }

  return IcoSphereGeometry;
}(_geometry2.default);

var IcoSphere = function (_Model) {
  _inherits(IcoSphere, _Model);

  function IcoSphere() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, IcoSphere);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(IcoSphere).call(this, _extends({ geometry: new IcoSphereGeometry(opts) }, opts)));
  }

  return IcoSphere;
}(_model2.default);

exports.default = IcoSphere;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vYmplY3RzL2ljby1zcGhlcmUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7Ozs7Ozs7Ozs7OztBQUlBLFNBQVMsSUFBVCxHQUFnQixFQUFoQjs7QUFFQSxJQUFNLGVBQWUsQ0FBQyxDQUFDLENBQUQsRUFBRyxDQUFKLEVBQU0sQ0FBTixFQUFTLENBQVQsRUFBVyxDQUFYLEVBQWEsQ0FBYixFQUFnQixDQUFoQixFQUFrQixDQUFsQixFQUFvQixDQUFDLENBQUQsRUFBSSxDQUF4QixFQUEwQixDQUExQixFQUE0QixDQUE1QixFQUErQixDQUEvQixFQUFpQyxDQUFDLENBQUQsRUFBRyxDQUFwQyxFQUF1QyxDQUF2QyxFQUF5QyxDQUF6QyxFQUEyQyxDQUEzQyxDQUFmO0FBQ04sSUFBTSxjQUFjLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsRUFBVyxDQUFYLEVBQWEsQ0FBYixFQUFlLENBQWYsRUFBaUIsQ0FBakIsRUFBbUIsQ0FBbkIsRUFBcUIsQ0FBckIsRUFBdUIsQ0FBdkIsRUFBeUIsQ0FBekIsRUFBMkIsQ0FBM0IsRUFBNkIsQ0FBN0IsRUFBK0IsQ0FBL0IsRUFBaUMsQ0FBakMsRUFBbUMsQ0FBbkMsRUFBcUMsQ0FBckMsRUFBdUMsQ0FBdkMsRUFBeUMsQ0FBekMsRUFBMkMsQ0FBM0MsRUFBNkMsQ0FBN0MsRUFBK0MsQ0FBL0MsQ0FBZDs7SUFFTzs7O0FBRVgsV0FGVyxpQkFFWCxHQUFnRTtxRUFBSixrQkFBSTs7K0JBQW5ELFdBQW1EO1FBQW5ELDZDQUFhLG9CQUFzQztnQ0FBbkMsWUFBbUM7UUFBbkMsK0NBQWMsd0JBQXFCOztRQUFaLHFFQUFZOzswQkFGckQsbUJBRXFEOztBQUM5RCxRQUFNLEtBQUssS0FBSyxFQUFMLENBRG1EO0FBRTlELFFBQU0sTUFBTSxLQUFLLENBQUwsQ0FGa0Q7O0FBSTlELFFBQU0scUJB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ZW50IjpbImltcG9ydCBHZW9tZXRyeSBmcm9tICcuLi9nZW9tZXRyeSc7XG5pbXBvcnQge1ZlYzN9IGZyb20gJy4uL21hdGgnO1xuaW1wb3J0IE1vZGVsIGZyb20gJy4uL21vZGVsJztcbmltcG9ydCB7bWFrZVR5cGVkQXJyYXl9IGZyb20gJy4uL3dlYmdsL3R5cGVzJztcblxuLyogZXNsaW50LWRpc2FibGUgY29tbWEtc3BhY2luZywgbWF4LXN0YXRlbWVudHMsIGNvbXBsZXhpdHkgKi9cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmNvbnN0IElDT19WRVJUSUNFUyA9IFstMSwwLDAsIDAsMSwwLCAwLDAsLTEsIDAsMCwxLCAwLC0xLDAsIDEsMCwwXTtcbmNvbnN0IElDT19JTkRJQ0VTID0gWzMsNCw1LDMsNSwxLDMsMSwwLDMsMCw0LDQsMCwyLDQsMiw1LDIsMCwxLDUsMiwxXTtcblxuZXhwb3J0IGNsYXNzIEljb1NwaGVyZUdlb21ldHJ5IGV4dGVuZHMgR2VvbWV0cnkge1xuXG4gIGNvbnN0cnVjdG9yKHtpdGVyYXRpb25zID0gMCwgb25BZGRWZXJ0ZXggPSBub29wLCAuLi5vcHRzfSA9IHt9KSB7XG4gICAgY29uc3QgUEkgPSBNYXRoLlBJO1xuICAgIGNvbnN0IFBJMiA9IFBJICogMjtcblxuICAgIGNvbnN0IHZlcnRpY2VzID0gWy4uLklDT19WRVJUSUNFU107XG4gICAgbGV0IGluZGljZXMgPSBbLi4uSUNPX0lORElDRVNdO1xuXG4gICAgdmVydGljZXMucHVzaCgpO1xuICAgIGluZGljZXMucHVzaCgpO1xuXG4gICAgdmFyIGdldE1pZGRsZVBvaW50ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBvaW50TWVtbyA9IHt9O1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oaTEsIGkyKSB7XG4gICAgICAgIGkxICo9IDM7XG4gICAgICAgIGkyICo9IDM7XG4gICAgICAgIGNvbnN0IG1pbmkgPSBpMSA8IGkyID8gaTEgOiBpMjtcbiAgICAgICAgY29uc3QgbWF4aSA9IGkxID4gaTIgPyBpMSA6IGkyO1xuICAgICAgICBjb25zdCBrZXkgPSBtaW5pICsgJ3wnICsgbWF4aTtcblxuICAgICAgICBpZiAoa2V5IGluIHBvaW50TWVtbykge1xuICAgICAgICAgIHJldHVybiBwb2ludE1lbW9ba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHgxID0gdmVydGljZXNbaTFdO1xuICAgICAgICBjb25zdCB5MSA9IHZlcnRpY2VzW2kxICsgMV07XG4gICAgICAgIGNvbnN0IHoxID0gdmVydGljZXNbaTEgKyAyXTtcbiAgICAgICAgY29uc3QgeDIgPSB2ZXJ0aWNlc1tpMl07XG4gICAgICAgIGNvbnN0IHkyID0gdmVydGljZXNbaTIgKyAxXTtcbiAgICAgICAgY29uc3QgejIgPSB2ZXJ0aWNlc1tpMiArIDJdO1xuICAgICAgICBsZXQgeG0gPSAoeDEgKyB4MikgLyAyO1xuICAgICAgICBsZXQgeW0gPSAoeTEgKyB5MikgLyAyO1xuICAgICAgICBsZXQgem0gPSAoejEgKyB6MikgLyAyO1xuICAgICAgICBjb25zdCBsZW4gPSBNYXRoLnNxcnQoeG0gKiB4bSArIHltICogeW0gKyB6bSAqIHptKTtcblxuICAgICAgICB4bSAvPSBsZW47XG4gICAgICAgIHltIC89IGxlbjtcbiAgICAgICAgem0gLz0gbGVuO1xuXG4gICAgICAgIHZlcnRpY2VzLnB1c2goeG0sIHltLCB6bSk7XG5cbiAgICAgICAgcmV0dXJuIChwb2ludE1lbW9ba2V5XSA9ICh2ZXJ0aWNlcy5sZW5ndGggLyAzIC0gMSkpO1xuICAgICAgfTtcbiAgICB9KCkpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVyYXRpb25zOyBpKyspIHtcbiAgICAgIHZhciBpbmRpY2VzMiA9IFtdO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBpbmRpY2VzLmxlbmd0aDsgaiArPSAzKSB7XG4gICAgICAgIGNvbnN0IGEgPSBnZXRNaWRkbGVQb2ludChpbmRpY2VzW2ogKyAwXSwgaW5kaWNlc1tqICsgMV0pO1xuICAgICAgICBjb25zdCBiID0gZ2V0TWlkZGxlUG9pbnQoaW5kaWNlc1tqICsgMV0sIGluZGljZXNbaiArIDJdKTtcbiAgICAgICAgY29uc3QgYyA9IGdldE1pZGRsZVBvaW50KGluZGljZXNbaiArIDJdLCBpbmRpY2VzW2ogKyAwXSk7XG5cbiAgICAgICAgaW5kaWNlczIucHVzaChcbiAgICAgICAgICBjLCBpbmRpY2VzW2ogKyAwXSwgYSxcbiAgICAgICAgICBhLCBpbmRpY2VzW2ogKyAxXSwgYixcbiAgICAgICAgICBiLCBpbmRpY2VzW2ogKyAyXSwgYyxcbiAgICAgICAgICBhLCBiLCBjKTtcbiAgICAgIH1cbiAgICAgIGluZGljZXMgPSBpbmRpY2VzMjtcbiAgICB9XG5cbiAgICAvLyBDYWxjdWxhdGUgdGV4Q29vcmRzIGFuZCBub3JtYWxzXG4gICAgY29uc3Qgbm9ybWFscyA9IG5ldyBBcnJheShpbmRpY2VzLmxlbmd0aCAqIDMpO1xuICAgIGNvbnN0IHRleENvb3JkcyA9IG5ldyBBcnJheShpbmRpY2VzLmxlbmd0aCAqIDIpO1xuXG4gICAgY29uc3QgbCA9IGluZGljZXMubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSBsIC0gMzsgaSA+PSAwOyBpIC09IDMpIHtcbiAgICAgIGxldCBpMSA9IGluZGljZXNbaSArIDBdO1xuICAgICAgbGV0IGkyID0gaW5kaWNlc1tpICsgMV07XG4gICAgICBsZXQgaTMgPSBpbmRpY2VzW2kgKyAyXTtcbiAgICAgIGNvbnN0IGluMSA9IGkxICogMztcbiAgICAgIGNvbnN0IGluMiA9IGkyICogMztcbiAgICAgIGNvbnN0IGluMyA9IGkzICogMztcbiAgICAgIGNvbnN0IGl1MSA9IGkxICogMjtcbiAgICAgIGNvbnN0IGl1MiA9IGkyICogMjtcbiAgICAgIGNvbnN0IGl1MyA9IGkzICogMjtcbiAgICAgIGNvbnN0IHgxID0gdmVydGljZXNbaW4xICsgMF07XG4gICAgICBjb25zdCB5MSA9IHZlcnRpY2VzW2luMSArIDFdO1xuICAgICAgY29uc3QgejEgPSB2ZXJ0aWNlc1tpbjEgKyAyXTtcbiAgICAgIGNvbnN0IHRoZXRhMSA9IE1hdGguYWNvcyh6MSAvIE1hdGguc3FydCh4MSAqIHgxICsgeTEgKiB5MSArIHoxICogejEpKTtcbiAgICAgIGNvbnN0IHBoaTEgPSBNYXRoLmF0YW4yKHkxLCB4MSkgKyBQSTtcbiAgICAgIGNvbnN0IHYxID0gdGhldGExIC8gUEk7XG4gICAgICBjb25zdCB1MSA9IDEgLSBwaGkxIC8gUEkyO1xuICAgICAgY29uc3QgeDIgPSB2ZXJ0aWNlc1tpbjIgKyAwXTtcbiAgICAgIGNvbnN0IHkyID0gdmVydGljZXNbaW4yICsgMV07XG4gICAgICBjb25zdCB6MiA9IHZlcnRpY2VzW2luMiArIDJdO1xuICAgICAgY29uc3QgdGhldGEyID0gTWF0aC5hY29zKHoyIC8gTWF0aC5zcXJ0KHgyICogeDIgKyB5MiAqIHkyICsgejIgKiB6MikpO1xuICAgICAgY29uc3QgcGhpMiA9IE1hdGguYXRhbjIoeTIsIHgyKSArIFBJO1xuICAgICAgY29uc3QgdjIgPSB0aGV0YTIgLyBQSTtcbiAgICAgIGNvbnN0IHUyID0gMSAtIHBoaTIgLyBQSTI7XG4gICAgICBjb25zdCB4MyA9IHZlcnRpY2VzW2luMyArIDBdO1xuICAgICAgY29uc3QgeTMgPSB2ZXJ0aWNlc1tpbjMgKyAxXTtcbiAgICAgIGNvbnN0IHozID0gdmVydGljZXNbaW4zICsgMl07XG4gICAgICBjb25zdCB0aGV0YTMgPSBNYXRoLmFjb3MoejMgLyBNYXRoLnNxcnQoeDMgKiB4MyArIHkzICogeTMgKyB6MyAqIHozKSk7XG4gICAgICBjb25zdCBwaGkzID0gTWF0aC5hdGFuMih5MywgeDMpICsgUEk7XG4gICAgICBjb25zdCB2MyA9IHRoZXRhMyAvIFBJO1xuICAgICAgY29uc3QgdTMgPSAxIC0gcGhpMyAvIFBJMjtcbiAgICAgIGNvbnN0IHZlYzEgPSBbXG4gICAgICAgIHgzIC0geDIsXG4gICAgICAgIHkzIC0geTIsXG4gICAgICAgIHozIC0gejJcbiAgICAgIF07XG4gICAgICBjb25zdCB2ZWMyID0gW1xuICAgICAgICB4MSAtIHgyLFxuICAgICAgICB5MSAtIHkyLFxuICAgICAgICB6MSAtIHoyXG4gICAgICBdO1xuICAgICAgY29uc3Qgbm9ybWFsID0gVmVjMy5jcm9zcyh2ZWMxLCB2ZWMyKS4kdW5pdCgpO1xuICAgICAgbGV0IG5ld0luZGV4O1xuXG4gICAgICBpZiAoKHUxID09PSAwIHx8IHUyID09PSAwIHx8IHUzID09PSAwKSAmJlxuICAgICAgICAgICh1MSA9PT0gMCB8fCB1MSA+IDAuNSkgJiZcbiAgICAgICAgICAgICh1MiA9PT0gMCB8fCB1MiA+IDAuNSkgJiZcbiAgICAgICAgICAgICAgKHUzID09PSAwIHx8IHUzID4gMC41KSkge1xuXG4gICAgICAgIHZlcnRpY2VzLnB1c2goXG4gICAgICAgICAgdmVydGljZXNbaW4xICsgMF0sXG4gICAgICAgICAgdmVydGljZXNbaW4xICsgMV0sXG4gICAgICAgICAgdmVydGljZXNbaW4xICsgMl1cbiAgICAgICAgKTtcbiAgICAgICAgbmV3SW5kZXggPSB2ZXJ0aWNlcy5sZW5ndGggLyAzIC0gMTtcbiAgICAgICAgaW5kaWNlcy5wdXNoKG5ld0luZGV4KTtcbiAgICAgICAgdGV4Q29vcmRzW25ld0luZGV4ICogMiArIDBdID0gMTtcbiAgICAgICAgdGV4Q29vcmRzW25ld0luZGV4ICogMiArIDFdID0gdjE7XG4gICAgICAgIG5vcm1hbHNbbmV3SW5kZXggKiAzICsgMF0gPSBub3JtYWwueDtcbiAgICAgICAgbm9ybWFsc1tuZXdJbmRleCAqIDMgKyAxXSA9IG5vcm1hbC55O1xuICAgICAgICBub3JtYWxzW25ld0luZGV4ICogMyArIDJdID0gbm9ybWFsLno7XG5cbiAgICAgICAgdmVydGljZXMucHVzaChcbiAgICAgICAgICB2ZXJ0aWNlc1tpbjIgKyAwXSxcbiAgICAgICAgICB2ZXJ0aWNlc1tpbjIgKyAxXSxcbiAgICAgICAgICB2ZXJ0aWNlc1tpbjIgKyAyXVxuICAgICAgICApO1xuICAgICAgICBuZXdJbmRleCA9IHZlcnRpY2VzLmxlbmd0aCAvIDMgLSAxO1xuICAgICAgICBpbmRpY2VzLnB1c2gobmV3SW5kZXgpO1xuICAgICAgICB0ZXhDb29yZHNbbmV3SW5kZXggKiAyICsgMF0gPSAxO1xuICAgICAgICB0ZXhDb29yZHNbbmV3SW5kZXggKiAyICsgMV0gPSB2MjtcbiAgICAgICAgbm9ybWFsc1tuZXdJbmRleCAqIDMgKyAwXSA9IG5vcm1hbC54O1xuICAgICAgICBub3JtYWxzW25ld0luZGV4ICogMyArIDFdID0gbm9ybWFsLnk7XG4gICAgICAgIG5vcm1hbHNbbmV3SW5kZXggKiAzICsgMl0gPSBub3JtYWwuejtcblxuICAgICAgICB2ZXJ0aWNlcy5wdXNoKFxuICAgICAgICAgIHZlcnRpY2VzW2luMyArIDBdLFxuICAgICAgICAgIHZlcnRpY2VzW2luMyArIDFdLFxuICAgICAgICAgIHZlcnRpY2VzW2luMyArIDJdXG4gICAgICAgICk7XG4gICAgICAgIG5ld0luZGV4ID0gdmVydGljZXMubGVuZ3RoIC8gMyAtIDE7XG4gICAgICAgIGluZGljZXMucHVzaChuZXdJbmRleCk7XG4gICAgICAgIHRleENvb3Jkc1tuZXdJbmRleCAqIDIgKyAwXSA9IDE7XG4gICAgICAgIHRleENvb3Jkc1tuZXdJbmRleCAqIDIgKyAxXSA9IHYzO1xuICAgICAgICBub3JtYWxzW25ld0luZGV4ICogMyArIDBdID0gbm9ybWFsLng7XG4gICAgICAgIG5vcm1hbHNbbmV3SW5kZXggKiAzICsgMV0gPSBub3JtYWwueTtcbiAgICAgICAgbm9ybWFsc1tuZXdJbmRleCAqIDMgKyAyXSA9IG5vcm1hbC56O1xuICAgICAgfVxuXG4gICAgICBub3JtYWxzW2luMSArIDBdID0gbm9ybWFsc1tpbjIgKyAwXSA9IG5vcm1hbHNbaW4zICsgMF0gPSBub3JtYWwueDtcbiAgICAgIG5vcm1hbHNbaW4xICsgMV0gPSBub3JtYWxzW2luMiArIDFdID0gbm9ybWFsc1tpbjMgKyAxXSA9IG5vcm1hbC55O1xuICAgICAgbm9ybWFsc1tpbjEgKyAyXSA9IG5vcm1hbHNbaW4yICsgMl0gPSBub3JtYWxzW2luMyArIDJdID0gbm9ybWFsLno7XG5cbiAgICAgIHRleENvb3Jkc1tpdTEgKyAwXSA9IHUxO1xuICAgICAgdGV4Q29vcmRzW2l1MSArIDFdID0gdjE7XG5cbiAgICAgIHRleENvb3Jkc1tpdTIgKyAwXSA9IHUyO1xuICAgICAgdGV4Q29vcmRzW2l1MiArIDFdID0gdjI7XG5cbiAgICAgIHRleENvb3Jkc1tpdTMgKyAwXSA9IHUzO1xuICAgICAgdGV4Q29vcmRzW2l1MyArIDFdID0gdjM7XG4gICAgfVxuXG4gICAgc3VwZXIoe1xuICAgICAgLi4ub3B0cyxcbiAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgdmVydGljZXM6IG1ha2VUeXBlZEFycmF5KEZsb2F0MzJBcnJheSwgdmVydGljZXMpLFxuICAgICAgICBub3JtYWxzOiBtYWtlVHlwZWRBcnJheShGbG9hdDMyQXJyYXksIG5vcm1hbHMpLFxuICAgICAgICB0ZXhDb29yZHM6IG1ha2VUeXBlZEFycmF5KEZsb2F0MzJBcnJheSwgdGV4Q29vcmRzKSxcbiAgICAgICAgaW5kaWNlczogbWFrZVR5cGVkQXJyYXkoVWludDE2QXJyYXksIGluZGljZXMpXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWNvU3BoZXJlIGV4dGVuZHMgTW9kZWwge1xuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICBzdXBlcih7Z2VvbWV0cnk6IG5ldyBJY29TcGhlcmVHZW9tZXRyeShvcHRzKSwgLi4ub3B0c30pO1xuICB9XG59XG4iXX0=