'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DRAWING_BUFFERS = undefined;
exports.default = initializeDrawBuffers;

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DRAWING_BUFFERS = exports.DRAWING_BUFFERS = [
// The fragment shader is not written to any color buffer.
'NONE',
// Fragment shader is written to the back color buffer.
'BACK',
// Fragment shader is written to the nth color attachment of the framebuffer.
'COLOR_ATTACHMENT0', 'COLOR_ATTACHMENT1', 'COLOR_ATTACHMENT2', 'COLOR_ATTACHMENT3', 'COLOR_ATTACHMENT4', 'COLOR_ATTACHMENT5', 'COLOR_ATTACHMENT6', 'COLOR_ATTACHMENT7', 'COLOR_ATTACHMENT8', 'COLOR_ATTACHMENT9', 'COLOR_ATTACHMENT10', 'COLOR_ATTACHMENT11', 'COLOR_ATTACHMENT12', 'COLOR_ATTACHMENT13', 'COLOR_ATTACHMENT14', 'COLOR_ATTACHMENT15'];

// Map bufferName string or enum to correct enum (extension version)
// WebGL2 polyfill of drawBuffers using the 'WEBGL_draw_buffers' extension.
// Note: The tricky part is copying the extension constants onto the gl context

/* global WebGLRenderingContext, WebGL2RenderingContext */
function getExtConstant(ext, constant) {
  if (constant.indexOf('COLOR_ATTACHMENT') === 0) {
    constant = constant + '_WEBGL';
  }
  return ext[constant];
}

/**
 * @param {WebGLRenderingContext} gl - gl context
 * @param {GLenum/String[]} buffers - array of enums
 */
function drawBuffers(gl, buffers) {
  var ext = gl.getExtension('WEBGL_draw_buffers');
  (0, _assert2.default)(ext, 'WEBGL_draw_buffers');
  ext.drawBuffersWEBGL(buffers);
}

// Only add if WebGL2RenderingContext is not available
if (!WebGL2RenderingContext) {

  var prototype = WebGLRenderingContext.prototype;

  prototype.drawBuffers = prototype.drawBuffers || drawBuffers;
}

function initializeDrawBuffers(gl) {
  var ext = gl.getExtension('WEBGL_draw_buffers');
  (0, _assert2.default)(ext, 'WEBGL_draw_buffers');
  for (var constant in DRAWING_BUFFERS) {
    gl[constant] = gl[constant] || getExtConstant(ext, constant);
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93ZWJnbC93ZWJnbDIvcG9seWZpbGwvZHJhdy1idWZmZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztrQkF5RHdCOztBQXJEeEI7Ozs7OztBQUVPLElBQU0sNENBQWtCOztBQUU3QixNQUY2Qjs7QUFJN0IsTUFKNkI7O0FBTTdCLG1CQU42QixFQU83QixtQkFQNkIsRUFRN0IsbUJBUjZCLEVBUzdCLG1CQVQ2QixFQVU3QixtQkFWNkIsRUFXN0IsbUJBWDZCLEVBWTdCLG1CQVo2QixFQWE3QixtQkFiNkIsRUFjN0IsbUJBZDZCLEVBZTdCLG1CQWY2QixFQWdCN0Isb0JBaEI2QixFQWlCN0Isb0JBakI2QixFQWtCN0Isb0JBbEI2QixFQW1CN0Isb0JBbkI2QixFQW9CN0Isb0JBcEI2QixFQXFCN0Isb0JBckI2QixDQUFsQjs7Ozs7OztBQXlCYixTQUFTLGNBQVQsQ0FBd0IsR0FBeEIsRUFBNkIsUUFBN0IsRUFBdUM7QUFDckMsTUFBSSxTQUFTLE9BQVQsQ0FBaUIsa0JBQWpCLE1BQXlDLENBQXpDLEVBQTRDO0FBQzlDLGVBQWMsbUJBQWQsQ0FEOEM7R0FBaEQ7QUFHQSxTQUFPLElBQUksUUFBSixDQUFQLENBSnFDO0NBQXZDOzs7Ozs7QUFXQSxTQUFTLFdBQVQsQ0FBcUIsRUFBckIsRUFBeUIsT0FBekIsRUFBa0M7QUFDaEMsTUFBTSxNQUFNLEdBQUcsWUFBSCxDQUFnQixvQkFBaEIsQ0FBTixDQUQwQjtBQUVoQyx3QkFBTyxHQUFQLEVBQVksb0JBQVosRUFGZ0M7QUFHaEMsTUFBSSxnQkFBSixDQUFxQixPQUFyQixFQUhnQztDQUFsQzs7O0FBT0EsSUFBSSxDQUFDLHNCQUFELEVBQXlCOztBQUUzQixNQUFNLFlBQVksc0JBQXNCLFNBQXRCLENBRlM7O0FBSTNCLFlBQVUsV0FBVixHQUF3QixVQUFVLFdBQVYsSUFBeUIsV0FBekIsQ0FKRztDQUE3Qjs7QUFRZSxTQUFTLHFCQUFULENBQStCLEVBQS9CLEVBQW1DO0FBQ2hELE1BQU0sTUFBTSxHQUFHLFlBQUgsQ0FBZ0Isb0JBQWhCLENBQU4sQ0FEMEM7QUFFaEQsd0JBQU8sR0FBUCxFQUFZLG9CQUFaLEVBRmdEO0FBR2hELE9BQUssSUFBTSxRQUFOLElBQWtCLGVBQXZCLEVBQXdDO0FBQ3RDLE9BQUcsUUFBSCxJQUFlLEdBQUcsUUFBSCxLQUFnQixlQUFlLEdBQWYsRUFBb0IsUUFBcEIsQ0FBaEIsQ0FEdUI7R0FBeEM7Q0FIYSIsImZpbGUiOiJkcmF3LWJ1ZmZlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXZWJHTDIgcG9seWZpbGwgb2YgZHJhd0J1ZmZlcnMgdXNpbmcgdGhlICdXRUJHTF9kcmF3X2J1ZmZlcnMnIGV4dGVuc2lvbi5cbi8vIE5vdGU6IFRoZSB0cmlja3kgcGFydCBpcyBjb3B5aW5nIHRoZSBleHRlbnNpb24gY29uc3RhbnRzIG9udG8gdGhlIGdsIGNvbnRleHRcblxuLyogZ2xvYmFsIFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgV2ViR0wyUmVuZGVyaW5nQ29udGV4dCAqL1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuXG5leHBvcnQgY29uc3QgRFJBV0lOR19CVUZGRVJTID0gW1xuICAvLyBUaGUgZnJhZ21lbnQgc2hhZGVyIGlzIG5vdCB3cml0dGVuIHRvIGFueSBjb2xvciBidWZmZXIuXG4gICdOT05FJyxcbiAgLy8gRnJhZ21lbnQgc2hhZGVyIGlzIHdyaXR0ZW4gdG8gdGhlIGJhY2sgY29sb3IgYnVmZmVyLlxuICAnQkFDSycsXG4gIC8vIEZyYWdtZW50IHNoYWRlciBpcyB3cml0dGVuIHRvIHRoZSBudGggY29sb3IgYXR0YWNobWVudCBvZiB0aGUgZnJhbWVidWZmZXIuXG4gICdDT0xPUl9BVFRBQ0hNRU5UMCcsXG4gICdDT0xPUl9BVFRBQ0hNRU5UMScsXG4gICdDT0xPUl9BVFRBQ0hNRU5UMicsXG4gICdDT0xPUl9BVFRBQ0hNRU5UMycsXG4gICdDT0xPUl9BVFRBQ0hNRU5UNCcsXG4gICdDT0xPUl9BVFRBQ0hNRU5UNScsXG4gICdDT0xPUl9BVFRBQ0hNRU5UNicsXG4gICdDT0xPUl9BVFRBQ0hNRU5UNycsXG4gICdDT0xPUl9BVFRBQ0hNRU5UOCcsXG4gICdDT0xPUl9BVFRBQ0hNRU5UOScsXG4gICdDT0xPUl9BVFRBQ0hNRU5UMTAnLFxuICAnQ09MT1JfQVRUQUNITUVOVDExJyxcbiAgJ0NPTE9SX0FUVEFDSE1FTlQxMicsXG4gICdDT0xPUl9BVFRBQ0hNRU5UMTMnLFxuICAnQ09MT1JfQVRUQUNITUVOVDE0JyxcbiAgJ0NPTE9SX0FUVEFDSE1FTlQxNSdcbl07XG5cbi8vIE1hcCBidWZmZXJOYW1lIHN0cmluZyBvciBlbnVtIHRvIGNvcnJlY3QgZW51bSAoZXh0ZW5zaW9uIHZlcnNpb24pXG5mdW5jdGlvbiBnZXRFeHRDb25zdGFudChleHQsIGNvbnN0YW50KSB7XG4gIGlmIChjb25zdGFudC5pbmRleE9mKCdDT0xPUl9BVFRBQ0hNRU5UJykgPT09IDApIHtcbiAgICBjb25zdGFudCA9IGAke2NvbnN0YW50fV9XRUJHTGA7XG4gIH1cbiAgcmV0dXJuIGV4dFtjb25zdGFudF07XG59XG5cbi8qKlxuICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIC0gZ2wgY29udGV4dFxuICogQHBhcmFtIHtHTGVudW0vU3RyaW5nW119IGJ1ZmZlcnMgLSBhcnJheSBvZiBlbnVtc1xuICovXG5mdW5jdGlvbiBkcmF3QnVmZmVycyhnbCwgYnVmZmVycykge1xuICBjb25zdCBleHQgPSBnbC5nZXRFeHRlbnNpb24oJ1dFQkdMX2RyYXdfYnVmZmVycycpO1xuICBhc3NlcnQoZXh0LCAnV0VCR0xfZHJhd19idWZmZXJzJyk7XG4gIGV4dC5kcmF3QnVmZmVyc1dFQkdMKGJ1ZmZlcnMpO1xufVxuXG4vLyBPbmx5IGFkZCBpZiBXZWJHTDJSZW5kZXJpbmdDb250ZXh0IGlzIG5vdCBhdmFpbGFibGVcbmlmICghV2ViR0wyUmVuZGVyaW5nQ29udGV4dCkge1xuXG4gIGNvbnN0IHByb3RvdHlwZSA9IFdlYkdMUmVuZGVyaW5nQ29udGV4dC5wcm90b3R5cGU7XG5cbiAgcHJvdG90eXBlLmRyYXdCdWZmZXJzID0gcHJvdG90eXBlLmRyYXdCdWZmZXJzIHx8IGRyYXdCdWZmZXJzO1xuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluaXRpYWxpemVEcmF3QnVmZmVycyhnbCkge1xuICBjb25zdCBleHQgPSBnbC5nZXRFeHRlbnNpb24oJ1dFQkdMX2RyYXdfYnVmZmVycycpO1xuICBhc3NlcnQoZXh0LCAnV0VCR0xfZHJhd19idWZmZXJzJyk7XG4gIGZvciAoY29uc3QgY29uc3RhbnQgaW4gRFJBV0lOR19CVUZGRVJTKSB7XG4gICAgZ2xbY29uc3RhbnRdID0gZ2xbY29uc3RhbnRdIHx8IGdldEV4dENvbnN0YW50KGV4dCwgY29uc3RhbnQpO1xuICB9XG59XG5cbiJdfQ==