'use strict';

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function vertexAttribDivisor(gl, index, divisor) {
  var ext = gl.getExtension('ANGLE_instanced_arrays');
  (0, _assert2.default)(gl, 'ANGLE_instanced_arrays');
  return ext.vertexAttribDivisorANGLE(index, divisor);
}

// GLenum mode, GLint first, GLsizei count, GLsizei instanceCount
// WebGL2 Polyfills for instanced rendering
// using ANGLE_instanced_arrays extension

/* eslint-disable max-params */
/* global WebGLRenderingContext, WebGL2RenderingContext */
function drawArraysInstanced(gl, mode, first, count, instanceCount) {
  var ext = gl.getExtension('ANGLE_instanced_arrays');
  (0, _assert2.default)(gl, 'ANGLE_instanced_arrays');
  return ext.drawArraysInstancedANGLE(mode, first, count, instanceCount);
}

// GLenum mode, GLsizei count, GLenum type,
// GLintptr offset, GLsizei instanceCount
function drawElementsInstanced(gl, mode, count, type, offset, instanceCount) {
  var ext = gl.getExtension('ANGLE_instanced_arrays');
  (0, _assert2.default)(gl, 'ANGLE_instanced_arrays');
  return ext.drawElementsInstancedANGLE(mode, count, type, offset, instanceCount);
}

// Only add if WebGL2RenderingContext is not available
if (!WebGL2RenderingContext) {

  var prototype = WebGLRenderingContext.prototype;

  prototype.vertexAttribDivisor = prototype.vertexAttribDivisor || vertexAttribDivisor;

  prototype.drawArraysInstanced = prototype.drawArraysInstanced || drawArraysInstanced;

  prototype.drawElementsInstanced = prototype.drawElementsInstanced || drawElementsInstanced;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy93ZWJnbC93ZWJnbDIvcG9seWZpbGwvaW5zdGFuY2VkLWFycmF5cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUtBOzs7Ozs7QUFFQSxTQUFTLG1CQUFULENBQTZCLEVBQTdCLEVBQWlDLEtBQWpDLEVBQXdDLE9BQXhDLEVBQWlEO0FBQy9DLE1BQU0sTUFBTSxHQUFHLFlBQUgsQ0FBZ0Isd0JBQWhCLENBQU4sQ0FEeUM7QUFFL0Msd0JBQU8sRUFBUCxFQUFXLHdCQUFYLEVBRitDO0FBRy9DLFNBQU8sSUFBSSx3QkFBSixDQUE2QixLQUE3QixFQUFvQyxPQUFwQyxDQUFQLENBSCtDO0NBQWpEOzs7Ozs7OztBQU9BLFNBQVMsbUJBQVQsQ0FBNkIsRUFBN0IsRUFBaUMsSUFBakMsRUFBdUMsS0FBdkMsRUFBOEMsS0FBOUMsRUFBcUQsYUFBckQsRUFBb0U7QUFDbEUsTUFBTSxNQUFNLEdBQUcsWUFBSCxDQUFnQix3QkFBaEIsQ0FBTixDQUQ0RDtBQUVsRSx3QkFBTyxFQUFQLEVBQVcsd0JBQVgsRUFGa0U7QUFHbEUsU0FBTyxJQUFJLHdCQUFKLENBQTZCLElBQTdCLEVBQW1DLEtBQW5DLEVBQTBDLEtBQTFDLEVBQWlELGFBQWpELENBQVAsQ0FIa0U7Q0FBcEU7Ozs7QUFRQSxTQUFTLHFCQUFULENBQStCLEVBQS9CLEVBQW1DLElBQW5DLEVBQXlDLEtBQXpDLEVBQWdELElBQWhELEVBQXNELE1BQXRELEVBQThELGFBQTlELEVBQTZFO0FBQzNFLE1BQU0sTUFBTSxHQUFHLFlBQUgsQ0FBZ0Isd0JBQWhCLENBQU4sQ0FEcUU7QUFFM0Usd0JBQU8sRUFBUCxFQUFXLHdCQUFYLEVBRjJFO0FBRzNFLFNBQU8sSUFBSSwwQkFBSixDQUNMLElBREssRUFDQyxLQURELEVBQ1EsSUFEUixFQUNjLE1BRGQsRUFDc0IsYUFEdEIsQ0FBUCxDQUgyRTtDQUE3RTs7O0FBU0EsSUFBSSxDQUFDLHNCQUFELEVBQXlCOztBQUUzQixNQUFNLFlBQVksc0JBQXNCLFNBQXRCLENBRlM7O0FBSTNCLFlBQVUsbUJBQVYsR0FBZ0MsVUFBVSxtQkFBVixJQUM5QixtQkFEOEIsQ0FKTDs7QUFPM0IsWUFBVSxtQkFBVixHQUFnQyxVQUFVLG1CQUFWLElBQzlCLG1CQUQ4QixDQVBMOztBQVUzQixZQUFVLHFCQUFWLEdBQWtDLFVBQVUscUJBQVYsSUFDaEMscUJBRGdDLENBVlA7Q0FBN0IiLCJmaWxlIjoiaW5zdGFuY2VkLWFycmF5cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFdlYkdMMiBQb2x5ZmlsbHMgZm9yIGluc3RhbmNlZCByZW5kZXJpbmdcbi8vIHVzaW5nIEFOR0xFX2luc3RhbmNlZF9hcnJheXMgZXh0ZW5zaW9uXG5cbi8qIGVzbGludC1kaXNhYmxlIG1heC1wYXJhbXMgKi9cbi8qIGdsb2JhbCBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgKi9cbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcblxuZnVuY3Rpb24gdmVydGV4QXR0cmliRGl2aXNvcihnbCwgaW5kZXgsIGRpdmlzb3IpIHtcbiAgY29uc3QgZXh0ID0gZ2wuZ2V0RXh0ZW5zaW9uKCdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyk7XG4gIGFzc2VydChnbCwgJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnKTtcbiAgcmV0dXJuIGV4dC52ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUoaW5kZXgsIGRpdmlzb3IpO1xufVxuXG4vLyBHTGVudW0gbW9kZSwgR0xpbnQgZmlyc3QsIEdMc2l6ZWkgY291bnQsIEdMc2l6ZWkgaW5zdGFuY2VDb3VudFxuZnVuY3Rpb24gZHJhd0FycmF5c0luc3RhbmNlZChnbCwgbW9kZSwgZmlyc3QsIGNvdW50LCBpbnN0YW5jZUNvdW50KSB7XG4gIGNvbnN0IGV4dCA9IGdsLmdldEV4dGVuc2lvbignQU5HTEVfaW5zdGFuY2VkX2FycmF5cycpO1xuICBhc3NlcnQoZ2wsICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyk7XG4gIHJldHVybiBleHQuZHJhd0FycmF5c0luc3RhbmNlZEFOR0xFKG1vZGUsIGZpcnN0LCBjb3VudCwgaW5zdGFuY2VDb3VudCk7XG59XG5cbi8vIEdMZW51bSBtb2RlLCBHTHNpemVpIGNvdW50LCBHTGVudW0gdHlwZSxcbi8vIEdMaW50cHRyIG9mZnNldCwgR0xzaXplaSBpbnN0YW5jZUNvdW50XG5mdW5jdGlvbiBkcmF3RWxlbWVudHNJbnN0YW5jZWQoZ2wsIG1vZGUsIGNvdW50LCB0eXBlLCBvZmZzZXQsIGluc3RhbmNlQ291bnQpIHtcbiAgY29uc3QgZXh0ID0gZ2wuZ2V0RXh0ZW5zaW9uKCdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyk7XG4gIGFzc2VydChnbCwgJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnKTtcbiAgcmV0dXJuIGV4dC5kcmF3RWxlbWVudHNJbnN0YW5jZWRBTkdMRShcbiAgICBtb2RlLCBjb3VudCwgdHlwZSwgb2Zmc2V0LCBpbnN0YW5jZUNvdW50XG4gICk7XG59XG5cbi8vIE9ubHkgYWRkIGlmIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgaXMgbm90IGF2YWlsYWJsZVxuaWYgKCFXZWJHTDJSZW5kZXJpbmdDb250ZXh0KSB7XG5cbiAgY29uc3QgcHJvdG90eXBlID0gV2ViR0xSZW5kZXJpbmdDb250ZXh0LnByb3RvdHlwZTtcblxuICBwcm90b3R5cGUudmVydGV4QXR0cmliRGl2aXNvciA9IHByb3RvdHlwZS52ZXJ0ZXhBdHRyaWJEaXZpc29yIHx8XG4gICAgdmVydGV4QXR0cmliRGl2aXNvcjtcblxuICBwcm90b3R5cGUuZHJhd0FycmF5c0luc3RhbmNlZCA9IHByb3RvdHlwZS5kcmF3QXJyYXlzSW5zdGFuY2VkIHx8XG4gICAgZHJhd0FycmF5c0luc3RhbmNlZDtcblxuICBwcm90b3R5cGUuZHJhd0VsZW1lbnRzSW5zdGFuY2VkID0gcHJvdG90eXBlLmRyYXdFbGVtZW50c0luc3RhbmNlZCB8fFxuICAgIGRyYXdFbGVtZW50c0luc3RhbmNlZDtcblxufVxuIl19