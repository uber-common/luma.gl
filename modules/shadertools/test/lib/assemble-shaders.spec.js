/* eslint-disable camelcase */
import {createTestContext} from '@luma.gl/test-utils';
import {assembleShaders, picking, fp64} from '@luma.gl/shadertools';
import test from 'tape-catch';

const fixture = {
  gl: createTestContext(),
  gl1: createTestContext({webgl2: false})
};

const VS_GLSL_300 = `\
#version 300 es

in vec4 positions;

void main(void) {
  gl_Position = positions;
}
`;
const FS_GLSL_300 = `\
#version 300 es

precision highp float;

out vec4 fragmentColor;

void main(void) {
  fragmentColor = vec4(1.0, 1.0, 1.0, 1.0);
}
`;

const VS_GLSL_300_2 = `\
#version 300 es

in vec4 positions;
in vec2 uvs;
in vec3 normals;

out vec2 vUV;
out vec3 vNormal;

void main(void) {
  vUV = uvs;
  vNormal = normals;
  gl_Position = positions;
}
`;

const FS_GLSL_300_2 = `\
#version 300 es

precision highp float;

uniform sampler2D tex;

in vec2 vUV;
in vec3 vNormal;

out vec4 fragmentColor;

void main(void) {
  fragmentColor = texture(tex, vUV) * vec4(vNormal, 1.0);
}
`;

// deck.gl mesh layer shaders
const VS_GLSL_300_DECK = `#version 300 es
#define SHADER_NAME simple-mesh-layer-vs

// Scale the model
uniform float sizeScale;
uniform bool composeModelMatrix;

// Primitive attributes
in vec3 positions;
in vec3 normals;
in vec2 texCoords;

// Instance attributes
in vec3 instancePositions;
in vec3 instancePositions64Low;
in vec4 instanceColors;
in vec3 instancePickingColors;
in mat3 instanceModelMatrix;
in vec3 instanceTranslation;

// Outputs to fragment shader
out vec2 vTexCoord;
out vec3 cameraPosition;
out vec3 normals_commonspace;
out vec4 position_commonspace;
out vec4 vColor;

void main(void) {
  vTexCoord = texCoords;
  cameraPosition = vec3(1.0);
  normals_commonspace = vec3(1.0);
  vColor = instanceColors;

  vec3 pos = (instanceModelMatrix * positions) * sizeScale + instanceTranslation;

  if (composeModelMatrix) {
    gl_Position = vec4(1.0);
  }
  else {
    gl_Position = vec4(1.0);
  }
}
`;

const FS_GLSL_300_DECK = `#version 300 es
#define SHADER_NAME simple-mesh-layer-fs

precision highp float;

uniform bool hasTexture;
uniform sampler2D sampler;
uniform bool flatShading;
uniform float opacity;

in vec2 vTexCoord;
in vec3 cameraPosition;
in vec3 normals_commonspace;
in vec4 position_commonspace;
in vec4 vColor;

out vec4 fragColor;

void main(void) {
  vec3 normal;
  if (flatShading) {
    normal = normalize(cross(dFdx(position_commonspace.xyz), dFdy(position_commonspace.xyz)));
  } else {
    normal = normals_commonspace;
  }

  vec4 color = hasTexture ? texture(sampler, vTexCoord) : vColor;
  vec3 lightColor = vec3(1.0);
  fragColor = vec4(lightColor, color.a * opacity);
}
`;

test('assembleShaders#import', t => {
  t.ok(assembleShaders !== undefined, 'assembleShaders import successful');
  t.end();
});

test('assembleShaders#version_directive', t => {
  const assembleResult = assembleShaders(fixture.gl, {
    vs: VS_GLSL_300,
    fs: FS_GLSL_300,
    modules: [picking]
  });
  // Verify version directive remains as first line.
  t.equal(
    assembleResult.vs.indexOf('#version 300 es'),
    0,
    'version directive should be first statement'
  );
  t.equal(
    assembleResult.fs.indexOf('#version 300 es'),
    0,
    'version directive should be first statement'
  );
  t.end();
});

test('assembleShaders#getUniforms', t => {
  // inject spy into the picking module's getUniforms
  // const module = getShaderModule(picking);
  // const getUniformsSpy = makeSpy(module, 'getUniforms');

  let assembleResult;

  // Without shader modules
  assembleResult = assembleShaders(fixture.gl, {
    vs: VS_GLSL_300,
    fs: FS_GLSL_300
  });
  // Verify getUniforms is function
  t.is(typeof assembleResult.getUniforms, 'function', 'getUniforms should be function');

  // With shader modules
  const testModule = {
    name: 'test-module',
    vs: '',
    fs: '',
    getUniforms: (opts, context) => {
      // Check a uniform generated by its dependency
      t.ok(context.picking_uActive, 'module getUniforms is called with correct context');
      return {};
    },
    dependencies: [picking]
  };

  assembleResult = assembleShaders(fixture.gl, {
    vs: VS_GLSL_300,
    fs: FS_GLSL_300,
    modules: [picking, testModule, fp64]
  });

  // Verify getUniforms is function
  t.is(typeof assembleResult.getUniforms, 'function', 'getUniforms should be function');

  t.end();
});

test('assembleShaders#defines', t => {
  const assembleResult = assembleShaders(fixture.gl, {
    vs: VS_GLSL_300,
    fs: FS_GLSL_300,
    defines: {IS_TEST: true}
  });

  t.ok(assembleResult.vs.indexOf('#define IS_TEST true') > 0, 'has application defines');
  t.ok(assembleResult.fs.indexOf('#define IS_TEST true') > 0, 'has application defines');

  t.end();
});

test('assembleShaders#shaderhooks', t => {
  const hookFunctions = [
    'vs:LUMAGL_pickColor(inout vec4 color)',
    {
      hook: 'fs:LUMAGL_fragmentColor(inout vec4 color)',
      header: 'if (color.a == 0.0) discard;\n',
      footer: 'color.a *= 1.2;\n'
    }
  ];

  const pickingInject = Object.assign(
    {
      inject: {
        'vs:LUMAGL_pickColor': 'picking_setPickingColor(color.rgb);',
        'fs:LUMAGL_fragmentColor': {
          injection: 'color = picking_filterColor(color);',
          order: Number.POSITIVE_INFINITY
        },
        'fs:#main-end': 'gl_FragColor = picking_filterColor(gl_FragColor);'
      }
    },
    picking
  );

  let assembleResult = assembleShaders(fixture.gl, {
    vs: VS_GLSL_300,
    fs: FS_GLSL_300,
    hookFunctions
  });
  // Verify version directive remains as first line.
  t.ok(
    assembleResult.vs.indexOf('LUMAGL_pickColor') > -1,
    'hook function injected into vertex shader'
  );
  t.ok(
    assembleResult.fs.indexOf('LUMAGL_fragmentColor') > -1,
    'hook function injected into fragment shader'
  );
  t.ok(
    assembleResult.fs.indexOf('if (color.a == 0.0) discard;') > -1,
    'hook header injected into fragment shader'
  );
  t.ok(
    assembleResult.vs.indexOf('picking_setPickingColor(color.rgb)') === -1,
    'injection code not included in vertex shader without module'
  );
  t.ok(
    assembleResult.fs.indexOf('color = picking_filterColor(color)') === -1,
    'injection code not included in fragment shader without module'
  );

  t.ok(
    assembleResult.fs.indexOf('gl_FragColor = picking_filterColor(gl_FragColor)') === -1,
    'regex injection code not included in fragment shader without module'
  );

  assembleResult = assembleShaders(fixture.gl, {
    vs: VS_GLSL_300,
    fs: FS_GLSL_300,
    modules: [pickingInject],
    hookFunctions
  });
  // Verify version directive remains as first line.
  t.ok(
    assembleResult.vs.indexOf('LUMAGL_pickColor') > -1,
    'hook function injected into vertex shader'
  );
  t.ok(
    assembleResult.fs.indexOf('LUMAGL_fragmentColor') > -1,
    'hook function injected into fragment shader'
  );
  t.ok(
    assembleResult.vs.indexOf('picking_setPickingColor(color.rgb)') > -1,
    'injection code included in vertex shader with module'
  );
  t.ok(
    assembleResult.fs.indexOf('color = picking_filterColor(color)') > -1,
    'injection code included in fragment shader with module'
  );
  t.ok(
    assembleResult.fs.indexOf('color.a *= 1.2;') >
      assembleResult.fs.indexOf('color = picking_filterColor(color)'),
    'hook footer injected after injection code'
  );
  t.ok(
    assembleResult.fs.indexOf('gl_FragColor = picking_filterColor(gl_FragColor)') > -1,
    'regex injection code included in fragment shader with module'
  );

  assembleResult = assembleShaders(fixture.gl, {
    vs: VS_GLSL_300,
    fs: FS_GLSL_300,
    inject: {
      'vs:LUMAGL_pickColor': 'color *= 0.1;',
      'fs:LUMAGL_fragmentColor': 'color += 0.1;'
    },
    hookFunctions
  });

  t.ok(
    assembleResult.vs.indexOf('color *= 0.1') > -1,
    'argument injection code included in shader hook'
  );
  t.ok(
    assembleResult.fs.indexOf('color += 0.1') > -1,
    'argument injection code included in shader hook'
  );

  assembleResult = assembleShaders(fixture.gl, {
    vs: VS_GLSL_300,
    fs: FS_GLSL_300,
    inject: {
      'fragmentColor = vec4(1.0, 1.0, 1.0, 1.0);': 'fragmentColor -= 0.1;'
    },
    hookFunctions
  });

  t.ok(
    assembleResult.fs.indexOf('fragmentColor -= 0.1;') > -1,
    'regex injection code included in shader hook'
  );

  t.end();
});

test('assembleShaders#transpilation', t => {
  const gl = fixture.gl1;
  let assembleResult = assembleShaders(gl, {
    vs: VS_GLSL_300,
    fs: FS_GLSL_300,
    modules: [picking],
    transpile: true
  });

  t.ok(assembleResult.vs.indexOf('#version 300 es') === -1, 'es 3.0 version directive removed');
  t.ok(!assembleResult.vs.match(/\bin vec4\b/), '"in" keyword removed');

  t.ok(assembleResult.fs.indexOf('#version 300 es') === -1, 'es 3.0 version directive removed');
  t.ok(!assembleResult.fs.match(/\bout vec4\b/), '"out" keyword removed');

  let vShader = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(vShader, assembleResult.vs);
  gl.compileShader(vShader);

  let fShader = gl.createShader(gl.FRAGMENT_SHADER);
  gl.shaderSource(fShader, assembleResult.fs);
  gl.compileShader(fShader);

  let program = gl.createProgram();
  gl.attachShader(program, vShader);
  gl.attachShader(program, fShader);
  gl.linkProgram(program);

  t.ok(gl.getProgramParameter(program, gl.LINK_STATUS), 'Transpile 300 to 100 valid program');

  gl.deleteShader(vShader);
  gl.deleteShader(fShader);
  gl.deleteProgram(program);

  assembleResult = assembleShaders(gl, {
    vs: VS_GLSL_300_2,
    fs: FS_GLSL_300_2,
    modules: [picking],
    transpile: true
  });

  vShader = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(vShader, assembleResult.vs);
  gl.compileShader(vShader);

  fShader = gl.createShader(gl.FRAGMENT_SHADER);
  gl.shaderSource(fShader, assembleResult.fs);
  gl.compileShader(fShader);

  program = gl.createProgram();
  gl.attachShader(program, vShader);
  gl.attachShader(program, fShader);
  gl.linkProgram(program);

  t.ok(gl.getProgramParameter(program, gl.LINK_STATUS), 'Transpile 300 to 100 valid program');

  gl.deleteShader(vShader);
  gl.deleteShader(fShader);
  gl.deleteProgram(program);

  assembleResult = assembleShaders(gl, {
    vs: VS_GLSL_300_DECK,
    fs: FS_GLSL_300_DECK,
    transpile: true
  });

  if (gl.getExtension('OES_standard_derivatives')) {
    vShader = gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(vShader, assembleResult.vs);
    gl.compileShader(vShader);

    fShader = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(fShader, assembleResult.fs);
    gl.compileShader(fShader);

    program = gl.createProgram();
    gl.attachShader(program, vShader);
    gl.attachShader(program, fShader);
    gl.linkProgram(program);

    t.ok(
      gl.getProgramParameter(program, gl.LINK_STATUS),
      'Deck shaders transpile 300 to 100 valid program'
    );
  }

  t.end();
});
