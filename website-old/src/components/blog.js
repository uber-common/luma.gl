import React, {Component, PropTypes} from 'react';
import autobind from 'autobind-decorator';

/*
 * This component wraps the static content generated by Jekyll
 * from the `blog` branch.
 * The route #/blog/path/to/content is rendered by this component
 * with an iframe containing ./blog/path/to/content.html
 * This allows the blog to use the same page layout as the rest
 * of the site.
 */
export default class Blog extends Component {

  // When the iframe finishes loading, traverse all <a> elements
  // in the child page and set their targets to the parent window
  @autobind _onPostLoaded(evt) {
    const doc = evt.target.contentDocument;
    const anchors = doc.getElementsByTagName('a');

    for (let i = 0; i < anchors.length; i++) {
      const anchor = anchors[i];
      anchor.onclick = this._onClickLink;
      anchor.target = '_parent';
    }
  }

  // A link in the child page was clicked
  @autobind _onClickLink(evt) {
    const href = evt.target.getAttribute('href');
    if (href.indexOf('/blog') === 0) {
      // If navigating inside the blog, redirect to react router
      evt.preventDefault();
      this.context.router.push(href);
    }
  }

  render() {
    // splat is the string that matches the wildcard in
    // the current route: <base_url>/blog/*
    let {routeParams: {splat = 'index'}} = this.props;

    splat = splat.replace(/\.html$/, '');

    return (
      <div className="blog-page">
        <iframe src={`./blog/${splat}.html`} onLoad={ this._onPostLoaded } />
      </div>
    );
  }
}

Blog.contextTypes = {
  router: PropTypes.object
};
